using System.Linq;
using CoolMeet.Models.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Console;

namespace CoolMeet.Repository
{
    public sealed class Context : IdentityDbContext<User>
    {
        public static readonly LoggerFactory MyLoggerFactory
            = new LoggerFactory(new[]
            {
                new ConsoleLoggerProvider((category, level)
                    => category == DbLoggerCategory.Database.Command.Name
                       && level == LogLevel.Information, true)
            });


        public Context(DbContextOptions options) : base(options)
        {
            Database.Migrate();
        }

        protected override void OnModelCreating(ModelBuilder builder)
        {
            base.OnModelCreating(builder);

            foreach (var relationship in builder.Model.GetEntityTypes().SelectMany(e => e.GetForeignKeys()))
            {
                relationship.DeleteBehavior = DeleteBehavior.Restrict;
            }

            builder.Entity<IdentityUserLogin<string>>()
                .HasKey(x => new { x.UserId });

            builder.Entity<IdentityUserRole<string>>()
                .HasKey(x => new { x.UserId });

            builder.Entity<IdentityUserToken<string>>()
                .HasKey(x => new { x.UserId });
        }


        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            //Just for logging SQL generated by EF to output window
            optionsBuilder.UseLoggerFactory(MyLoggerFactory);
        }


        public new DbSet<User> Users { get; set; }
        public DbSet<Event> Events { get; set; }
        public DbSet<EventUser> EventUsers { get; set; }
        public DbSet<Status> Statuses { get; set; }
        public DbSet<Comment> Comments { get; set; }

    }
}